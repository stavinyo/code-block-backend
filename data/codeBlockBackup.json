[
    {
        "_id": "b001",
        "title": "Async case",
        "codeContent": "async function fetchData() {\n    try {\n        const response = await fetch('https://api.example.com/data');\n        const data = await response.json();\n        console.log(data);\n        \n        // Perform additional operations with the data\n        const processedData = processAsyncData(data);\n        console.log(processedData);\n\n        // Update the UI with the processed data\n        updateUI(processedData);\n    } catch (error) {\n        console.error('Error fetching data:', error);\n    }\n}"
    },
    {
        "_id": "b002",
        "title": "Promises example",
        "codeContent": "function delayedExecution() {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve('Promise resolved!');\n        }, 2000);\n    });\n}\n\nasync function executePromise() {\n    try {\n        const result = await delayedExecution();\n        console.log(result);\n\n        // Perform additional operations after resolving the promise\n        handlePromiseResult(result);\n    } catch (error) {\n        console.error('Promise rejected:', error);\n    }\n}"
    },
    {
        "_id": "b003",
        "title": "Event-driven programming",
        "codeContent": "document.addEventListener('click', function(event) {\n    const x = event.clientX;\n    const y = event.clientY;\n    console.log(`Clicked at (${x}, ${y})`);\n    \n    // Check if the click is within a specific region\n    if (isWithinRegion(x, y)) {\n        // Perform actions specific to the region\n        handleRegionClick();\n    } else {\n        // Handle clicks outside the specific region\n        handleOutsideRegionClick();\n    }\n}"
    },
    {
        "_id": "b004",
        "title": "RESTful API endpoint",
        "codeContent": "app.get('/api/resource/:resourceId', function(req, res) {\n    const resourceId = req.params.resourceId;\n    \n    try {\n        // Fetch resource from the database\n        const resource = db.getResourceById(resourceId);\n        \n        if (resource) {\n            // Send the resource as JSON response\n            res.json(resource);\n        } else {\n            // Handle resource not found\n            res.status(404).json({ error: 'Resource not found' });\n        }\n    } catch (error) {\n        console.error('Error fetching resource:', error);\n        res.status(500).json({ error: 'Internal server error' });\n    }\n}"
    }
]
